#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}


struct Node* createCSLL(int arr[], int n) {
    if (n == 0) return NULL;

    struct Node* head = createNode(arr[0]);
    struct Node* last = head;

    for (int i = 1; i < n; i++) {
        struct Node* newNode = createNode(arr[i]);
        last->next = newNode;
        last = newNode;
    }

    last->next = head; 
    return head;
}


void traverseCSLL(struct Node* head) 
{
    if (head == NULL) 
    {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = head;
    do 
    {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(head)\n");
}


void insert_Beg(struct Node** head, int data)
{
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        newNode->next = newNode; 
    } else 
    {
        struct Node* last = *head;
        while (last->next != *head)
        {
            last = last->next; 
        }
        newNode->next = *head;  
        last->next = newNode;   
        *head = newNode;        
    }
}


void insert_End(struct Node** head, int data) 
{
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        newNode->next = newNode; 
    } else {
        struct Node* last = *head;
        while (last->next != *head)
        {
            last = last->next; 
        }
        last->next = newNode; 
        newNode->next = *head; 
    }
}


int main()
{
    int arr[] = {10, 20, 30, 40, 50};
    int n = sizeof(arr) / sizeof(arr[0]);

    
    struct Node* head = createCSLL(arr, n);

    
    printf("Initial Circular Singly Linked List: ");
    traverseCSLL(head);

    
    insert_Beg(&head, 5);
    printf("After inserting 5 at the beginning: ");
    traverseCSLL(head);

    
    insert_End(&head, 60);
    printf("After inserting 60 at the end: ");
    traverseCSLL(head);

    

    return 0;
}
