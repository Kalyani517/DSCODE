#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef struct Node
{
int data;
struct Node* next;
} Node;

typedef struct Stack
{
Node* top;
} Stack;

void initStack(Stack* s)
{
s-&gt;top = NULL;
}

int isEmpty(Stack* s)
{
return s-&gt;top == NULL;
}

void push(Stack* s, int item)
{
Node* newNode = (Node*)malloc(sizeof(Node));
if (!newNode)
{
printf(&quot;Memory allocation failed!\n&quot;);

return;
}
newNode-&gt;data = item;
newNode-&gt;next = s-&gt;top;
s-&gt;top = newNode;
}

int pop(Stack* s)
{
if (isEmpty(s))
{
printf(&quot;Stack underflow!\n&quot;);
return -1;
}
Node* temp = s-&gt;top;
int poppedValue = temp-&gt;data;
s-&gt;top = s-&gt;top-&gt;next;
free(temp);
return poppedValue;
}

int peek(Stack* s)
{
if (isEmpty(s))
{
printf(&quot;Stack is empty!\n&quot;);
return -1;
}
return s-&gt;top-&gt;data;
}

void display(Stack* s)
{
if (isEmpty(s))
{
printf(&quot;Stack is empty!\n&quot;);
return;
}
Node* current = s-&gt;top;
printf(&quot;Stack elements: &quot;);
while (current)
{
printf(&quot;%d &quot;, current-&gt;data);
current = current-&gt;next;
}
printf(&quot;\n&quot;);
}

int main()
{
Stack stack;
initStack(&amp;stack);

push(&amp;stack, 10);
push(&amp;stack, 20);
push(&amp;stack, 30);
display(&amp;stack);

printf(&quot;Top element: %d\n&quot;, peek(&amp;stack));

printf(&quot;Popped element: %d\n&quot;, pop(&amp;stack));

display(&amp;stack);

printf(&quot;Popped element: %d\n&quot;, pop(&amp;stack));
printf(&quot;Popped element: %d\n&quot;, pop(&amp;stack));

pop(&amp;stack);

return 0;
}
