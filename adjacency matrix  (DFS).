#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 10


typedef struct Graph 
{
    int numVertices;
    int adjMatrix[MAX_VERTICES][MAX_VERTICES];
    int visited[MAX_VERTICES]; 
} Graph;


void initGraph(Graph* g, int vertices) 
{
    g->numVertices = vertices;
    for (int i = 0; i < vertices; i++) 
    {
        for (int j = 0; j < vertices; j++) 
        {
            g->adjMatrix[i][j] = 0; 
        }
        g->visited[i] = 0; 
    }
}


void addEdge(Graph* g, int src, int dest) 
{
    g->adjMatrix[src][dest] = 1;
    g->adjMatrix[dest][src] = 1; 
}


void printGraph(Graph* g) 
{
    printf("Adjacency Matrix:\n");
    for (int i = 0; i < g->numVertices; i++) 
    {
        for (int j = 0; j < g->numVertices; j++) 
        {
            printf("%d ", g->adjMatrix[i][j]);
        }
        printf("\n");
    }
}


void dfs(Graph* g, int vertex) 
{
    
    g->visited[vertex] = 1;
    printf("%d ", vertex);

    
    for (int i = 0; i < g->numVertices; i++) 
    {
        if (g->adjMatrix[vertex][i] == 1 && !g->visited[i]) 
        {
            dfs(g, i);
        }
    }
}


int main()
{
    Graph g;
    int vertices = 5;

    initGraph(&g, vertices);
    addEdge(&g, 0, 1);
    addEdge(&g, 0, 2);
    addEdge(&g, 1, 3);
    addEdge(&g, 1, 4);
    addEdge(&g, 2, 3);

    printGraph(&g);

    printf("DFS Traversal: ");
    dfs(&g, 0);  
    printf("\n");

    return 0;
}
