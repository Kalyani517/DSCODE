#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 10


typedef struct Node 
{
    int vertex;
    struct Node* next;
} Node;


typedef struct Graph
{
    int numVertices;
    Node* adjLists[MAX_VERTICES];
    int visited[MAX_VERTICES]; 
} Graph;


Node* createNode(int vertex) 
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}


void initGraph(Graph* g, int vertices) 
{
    g->numVertices = vertices;
    for (int i = 0; i < vertices; i++) 
    {
        g->adjLists[i] = NULL;
        g->visited[i] = 0; 
        
    }
}


void addEdge(Graph* g, int src, int dest) 
{
    
    Node* newNode = createNode(dest);
    newNode->next = g->adjLists[src];
    g->adjLists[src] = newNode;

    
    newNode = createNode(src);
    newNode->next = g->adjLists[dest];
    g->adjLists[dest] = newNode;
}


void printGraph(Graph* g) 
{
    printf("Adjacency List:\n");
    for (int i = 0; i < g->numVertices; i++)
    {
        Node* temp = g->adjLists[i];
        printf("%d: ", i);
        while (temp) 
        {
            printf("%d -> ", temp->vertex);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}


void dfs(Graph* g, int vertex) 
{
    
    g->visited[vertex] = 1;
    printf("%d ", vertex);

   
    Node* temp = g->adjLists[vertex];
    while (temp) {
        int adjVertex = temp->vertex;
        if (!g->visited[adjVertex]) 
        {
            dfs(g, adjVertex);
        }
        temp = temp->next;
    }
}


int main()
{
    Graph g;
    int vertices = 5;

    initGraph(&g, vertices);
    addEdge(&g, 0, 1);
    addEdge(&g, 0, 2);
    addEdge(&g, 1, 3);
    addEdge(&g, 1, 4);
    addEdge(&g, 2, 3);

    printGraph(&g);

    printf("DFS Traversal: ");
    dfs(&g, 0);  
    printf("\n");

    return 0;
}
