#include <stdio.h>
#include <stdlib.h>

#define SIZE 5 

typedef struct {
    int items[SIZE];
    int front, rear;
} Queue;


void initializeQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}


int isFull(Queue* q) {
    return q->rear == SIZE - 1;
}


int isEmpty(Queue* q) {
    return q->front == -1;
}


void enqueue(Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is Full! Cannot add %d\n", value);
        return;
    }

    if (q->front == -1) {
        q->front = 0; 
    }
    q->rear++;
    q->items[q->rear] = value;
    printf("%d added to the queue.\n", value);
}


void dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is Empty! Cannot dequeue.\n");
        return;
    }

    printf("%d removed from the queue.\n", q->items[q->front]);

    // If there is only one element left, reset the queue
    if (q->front == q->rear) {
        q->front = q->rear = -1;
    } else {
        q->front++;
    }
}


void printQueue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is Empty!\n");
        return;
    }

    printf("Queue elements: ");
    for (int i = q->front; i <= q->rear; i++) {
        printf("%d ", q->items[i]);
    }
    printf("\n");
}


int main() {
    Queue q;
    initializeQueue(&q);

    int choice, value;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Add (Enqueue)\n");
        printf("2. Delete (Dequeue)\n");
        printf("3. Print\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to add: ");
                scanf("%d", &value);
                enqueue(&q, value);
                break;

            case 2:
                dequeue(&q);
                break;

            case 3:
                printQueue(&q);
                break;

            case 4:
                printf("Exiting...\n");
                exit(0);

            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
