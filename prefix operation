#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;

#define MAX 100

typedef struct
{
char arr[MAX];
int top;
} Stack;

void initStack(Stack* s)
{
s-&gt;top = -1;
}

int isEmpty(Stack* s)
{
return s-&gt;top == -1;
}

void push(Stack* s, char item)
{
s-&gt;arr[++s-&gt;top] = item;
}

char pop(Stack* s)
{
return s-&gt;arr[s-&gt;top--];

}

int precedence(char op)
{
switch (op)
{
case &#39;+&#39;:
case &#39;-&#39;: return 1;
case &#39;*&#39;:
case &#39;/&#39;: return 2;
case &#39;^&#39;: return 3;
default: return 0;
}
}

void reverse(char* exp)
{
int n = strlen(exp);
for (int i = 0; i &lt; n / 2; i++)
{
char temp = exp[i];
exp[i] = exp[n - i - 1];
exp[n - i - 1] = temp;
}
}

void infixToPrefix(char* infix, char* prefix)
{
Stack stack;
initStack(&amp;stack);
reverse(infix);

char* output = prefix;

for (int i = 0; infix[i]; i++
) {
char token = infix[i];

if (isalnum(token))
{
*output++ = token;
} else if (token == &#39;)&#39;)
{
push(&amp;stack, token);
} else if (token == &#39;(&#39;)
{
while (!isEmpty(&amp;stack) &amp;&amp; peek(&amp;stack) != &#39;)&#39;)
{
*output++ = pop(&amp;stack);
}
pop(&amp;stack); // Pop &#39;)&#39;
} else {
while (!isEmpty(&amp;stack) &amp;&amp; precedence(token) &lt; precedence(peek(&amp;stack)))
{
*output++ = pop(&amp;stack);
}
push(&amp;stack, token);
}
}
while (!isEmpty(&amp;stack)) {
*output++ = pop(&amp;stack);
}
*output = &#39;\0&#39;;

reverse(prefix);
}

int main()
{
char infix[MAX], prefix[MAX];
printf(&quot;Enter an infix expression: &quot;);
fgets(infix, MAX, stdin);
infix[strcspn(infix, &quot;\n&quot;)] = 0;
infixToPrefix(infix, prefix);
printf(&quot;Prefix expression: %s\n&quot;, prefix);
return 0;
}
