#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 10
#define QUEUE_SIZE 100


typedef struct Node 
{
    int vertex;
    struct Node* next;
} Node;


typedef struct Graph
{
    int numVertices;
    Node* adjLists[MAX_VERTICES];
} Graph;


typedef struct 
{
    int items[QUEUE_SIZE];
    int front, rear;
} Queue;


void initQueue(Queue* q) 
{
    q->front = -1;
    q->rear = -1;
}


int isEmpty(Queue* q) 
{
    return q->front == -1;
}


void enqueue(Queue* q, int value) 
{
    if (q->rear == QUEUE_SIZE - 1)
    {
        printf("Queue overflow\n");
        return;
    }
    if (q->front == -1) q->front = 0;
    q->items[++q->rear] = value;
}


int dequeue(Queue* q) 
{
    if (isEmpty(q)) 
    {
        printf("Queue underflow\n");
        return -1;
    }
    int value = q->items[q->front];
    if (q->front >= q->rear)
    {
        q->front = q->rear = -1;
    } else {
        q->front++;
    }
    return value;
}


Node* createNode(int vertex)
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}


void initGraph(Graph* g, int vertices)
{
    g->numVertices = vertices;
    for (int i = 0; i < vertices; i++) 
    {
        g->adjLists[i] = NULL;
    }
}


void addEdge(Graph* g, int src, int dest) 
{
    
    Node* newNode = createNode(dest);
    newNode->next = g->adjLists[src];
    g->adjLists[src] = newNode;

    
    newNode = createNode(src);
    newNode->next = g->adjLists[dest];
    g->adjLists[dest] = newNode;
}


void printGraph(Graph* g)
{
    printf("Adjacency List:\n");
    for (int i = 0; i < g->numVertices; i++) 
    {
        Node* temp = g->adjLists[i];
        printf("%d: ", i);
        while (temp) {
            printf("%d -> ", temp->vertex);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}


void bfs(Graph* g, int startVertex) 
{
    int visited[MAX_VERTICES] = {0};
    Queue q;
    initQueue(&q);

    visited[startVertex] = 1;
    enqueue(&q, startVertex);

    printf("BFS Traversal: ");
    while (!isEmpty(&q)) 
    {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);

        Node* temp = g->adjLists[currentVertex];
        while (temp) 
        {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex]) 
            {
                visited[adjVertex] = 1;
                enqueue(&q, adjVertex);
            }
            temp = temp->next;
        }
    }
    printf("\n");
}


int main() 
{
    Graph g;
    int vertices = 5;

    initGraph(&g, vertices);
    addEdge(&g, 0, 1);
    addEdge(&g, 0, 2);
    addEdge(&g, 1, 3);
    addEdge(&g, 1, 4);
    addEdge(&g, 2, 3);

    printGraph(&g);
    bfs(&g, 0);  

    return 0;
}
